# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XuRcF1lX_1HrbFgtHgZoV7065fNnk5Gb

# ***✅ Step 1: Import Libraries***
"""

# Step 1: Import necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans

"""# ***✅ Step 2: Load the Dataset***"""

# Step 2: Load the dataset
# Make sure 'Mall_Customers.csv' is in your working directory

df = pd.read_csv("/content/drive/MyDrive/clustrining/Mall_Customers.csv")

# Show first 5 rows
df.head()

"""# ***✅ Step 3: Explore Dataset Features***"""

# Step 3: Explore the dataset
print(df.info())  # Check column types and null values
print(df.describe())  # Summary statistics

# Check value counts for gender (optional)
print(df['Genre'].value_counts())

# Display columns
print(df.columns)

"""# ***✅ Step 4: Select Features for Clustering***"""

# Step 4: Select the features for clustering
# We use Annual Income and Spending Score as numeric features

X = df[['Annual Income (k$)', 'Spending Score (1-100)']]

# Show selected features
print(X.head())

"""# ***✅ Step 5: Use Elbow Method to Find Optimal K***"""

# Step 5: Use the Elbow Method to find the optimal number of clusters (K)

wcss = []  # WCSS = Within-Cluster Sum of Squares

for i in range(1, 11):
    kmeans = KMeans(n_clusters=i, init='k-means++', random_state=42)
    kmeans.fit(X)
    wcss.append(kmeans.inertia_)

# Plot the Elbow Graph
plt.plot(range(1, 11), wcss, marker='o')
plt.title("Elbow Method for Optimal K")
plt.xlabel("Number of Clusters (K)")
plt.ylabel("WCSS")
plt.grid(True)
plt.show()

"""# ***✅ Step 6: Apply K-Means with Optimal K***"""

# Step 6: Apply K-Means with the chosen K (e.g., K=3)

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=42)
y_kmeans = kmeans.fit_predict(X)

# Add cluster labels to the original DataFrame
df['Cluster'] = y_kmeans

# Show some rows with cluster labels
df[['CustomerID', 'Annual Income (k$)', 'Spending Score (1-100)', 'Cluster']].head()

"""# ***✅ Step 7: Visualize the Clusters***"""

# Step 7: Visualize the clusters

plt.figure(figsize=(8, 6))

# Plot each cluster with a different color
plt.scatter(X.values[y_kmeans == 0, 0], X.values[y_kmeans == 0, 1], label='Cluster 0')
plt.scatter(X.values[y_kmeans == 1, 0], X.values[y_kmeans == 1, 1], label='Cluster 1')
plt.scatter(X.values[y_kmeans == 2, 0], X.values[y_kmeans == 2, 1], label='Cluster 2')
plt.scatter(X.values[y_kmeans == 3, 0], X.values[y_kmeans == 3, 1], label='Cluster 3')
plt.scatter(X.values[y_kmeans == 4, 0], X.values[y_kmeans == 4, 1], label='Cluster 4')

# Plot centroids
plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],
            s=300, c='black', marker='X', label='Centroids')

plt.title("Customer Segments by K-Means")
plt.xlabel("Annual Income (k$)")
plt.ylabel("Spending Score (1-100)")
plt.legend()
plt.grid(True)
plt.show()